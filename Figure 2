library(ggplot2)
library(tidyr)
library(deSolve)

model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
   
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B
    dE <- (-dB -dV -dD)
    
    return(list(c(dV , dD, dB, dE)))
    
  })
}

beta_V = 2
beta_D = 3
delta_B = 1
delta_V = 1
delta_D = 100

step_size <- 0.1

parameters <- c(beta_V = beta_V, beta_D = beta_D, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D)
state <- c(V = 0.1, D = 0.0, B = 0.1, E=0.8)
times <- seq(0,30,by=step_size)

out <- as.data.frame(ode(y = state, times = times, func = model, parms = parameters))
out$exp_V = (1-delta_V/beta_V)
head(out)

p1 <- ggplot(pivot_longer(out, c(2,4,5,6)), aes(x = time, y = value, group = name, color = name, linetype = name)) + geom_line(size = 1) +
  scale_color_manual(labels = c( "B", "E",expression(V[wo]),"V"),name = "something", values = c( "blue","black", "purple","red")) + theme(axis.title.x=element_blank(),
                                                                                                                 axis.text.x=element_blank(),
                                                                                                                 axis.ticks.x=element_blank()) 
p1 <- p1 + labs(x = "time", y = "Cell frequencies") + ylim(0,1) + ggtitle("(A)"~paste(delta[D],"=", infinity)) + theme(legend.position = "left")
p1 <- p1 + theme(legend.title = element_blank()) + theme(text = element_text(size = 15))
p1 <- p1 + scale_linetype_manual(values = c(rep("solid", 2), rep("dashed", 1),rep("solid", 1)),name = "something",labels = c( "B", "E",expression(V[wo]),"V"))
p1


#######################


model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B
    dE <- (-dB -dV -dD)
    
    return(list(c(dV , dD, dB, dE)))
    
  })
}


beta_V = 2
beta_D = 3
delta_B = 1
delta_V = 1
delta_D = 2

step_size <- 0.1

parameters <- c(beta_V = beta_V, beta_D = beta_D, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D)
state <- c(V = 0.1, D = 0.1, B = 0.1, E=0.7)
times <- seq(0,30,by=step_size)

out <- as.data.frame(ode(y = state, times = times, func = model, parms = parameters))
out$exp_V = (1-delta_V/beta_V)
head(out)

p2 <- ggplot(pivot_longer(out, 2:6), aes(x = time, y = value, group = name, color = name, linetype = name)) + geom_line(size = 1) +
  scale_color_manual(labels = c( "B","D", "E",expression(V[wo]),"V"),name = "something", values = c( "blue", "green","black", "purple", "red")) +
  labs(x = "time", y = "Cell frequencies") + ylim(0,1) + ggtitle("(B)"~paste(delta[D],"= 2")) + theme(legend.position = "left")
p2 <- p2 + theme(legend.title = element_blank()) + theme(text = element_text(size = 15)) + theme(axis.title=element_blank(),
                                                                                                 axis.text=element_blank(),
                                                                                                 axis.ticks=element_blank())
p2 <- p2 + scale_linetype_manual(values = c(rep("solid", 3), rep("dashed", 1),rep("solid", 1)),name = "something",labels = c( "B","D", "E",expression(V[wo]),"V"))
p2


##########################

model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B
    dE <- (-dB -dV -dD)
    
    return(list(c(dV , dD, dB, dE)))
    
  })
}


beta_V = 2
beta_D = 3
delta_B = 1
delta_V = 1
delta_D = 1

step_size <- 0.1

parameters <- c(beta_V = beta_V, beta_D = beta_D, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D)
state <- c(V = 0.1, D = 0.1, B = 0.1, E=0.7)
times <- seq(0,30,by=step_size)

out <- as.data.frame(ode(y = state, times = times, func = model, parms = parameters))
out$exp_V = (1-delta_V/beta_V)
head(out)

p3 <- ggplot(pivot_longer(out, 2:6), aes(x = time, y = value, group = name, color = name, linetype = name)) + geom_line(size = 1) +
  scale_color_manual(labels = c( "B","D", "E",expression(V[wo]),"V"),name = "something", values = c( "blue", "green","black", "purple", "red")) +
  labs(x = "time", y = "Cell frequencies") + ylim(0,1) + ggtitle("(C)"~paste(delta[D],"= 1")) + theme(legend.position = "left")
p3 <- p3 + theme(legend.title = element_blank()) + theme(text = element_text(size = 15))
p3 <- p3 + scale_linetype_manual(values = c(rep("solid", 3), rep("dashed", 1),rep("solid", 1)),name = "something",labels = c( "B","D", "E",expression(V[wo]),"V"))
p3


############################

model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B
    dE <- (-dB -dV -dD)
    
    return(list(c(dV , dD, dB, dE)))
   
  })
}


beta_V = 2
beta_D = 3
delta_B = 1
delta_V = 1
delta_D = 0.5

step_size <- 0.1

parameters <- c(beta_V = beta_V, beta_D = beta_D, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D)
state <- c(V = 0.1, D = 0.1, B = 0.1, E=0.7)
times <- seq(0,30,by=step_size)

out <- as.data.frame(ode(y = state, times = times, func = model, parms = parameters))
out$exp_V = (1-delta_V/beta_V)
head(out)


p4 <- ggplot(pivot_longer(out, 2:6), aes(x = time, y = value, group = name, color = name, linetype = name)) + geom_line(size = 1) +
  scale_color_manual(labels = c( "B","D", "E",expression(V[wo]),"V"),name = "something", values = c( "blue", "green","black", "purple", "red")) +
  labs(x = "time", y = "Cell frequencies") + ylim(0,1) + ggtitle("(D)"~paste(delta[D],"= 0.5")) + theme(legend.position = "left")
p4 <- p4 + theme(legend.title = element_blank()) + theme(text = element_text(size = 15)) + theme(axis.title.y=element_blank(),
                                                                                                 axis.text.y=element_blank(),
                                                                                                 axis.ticks.y=element_blank())
p4 <- p4 + scale_linetype_manual(values = c(rep("solid", 3), rep("dashed", 1),rep("solid", 1)),name = "something",labels = c( "B","D", "E",expression(V[wo]),"V"))
p4



##################

library(gridExtra)

grid.arrange(p1,p2,p3,p4,ncol=2)







