#loading the packages
library(deSolve)
library(tidyverse)
library(rootSolve)
library(RColorBrewer)
library(parallel)
library(pbmcapply)
library(metR)
library(farver)
library(rlang)
library(ggplot2)
library("pracma")
library(gridExtra)

####### DIPs at the beginning ########################

#the ODE model
model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V - k_IV * I * V - k_AV * A * V
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B - k_IB * I * B - k_AB * A * B
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D - k_ID * I * D - k_AD * A * D
    dE <- (-dB -dV -dD)
    dI <- (1-I) * (s_IV * V + s_IB * B + s_ID * D) - d_I * I
    dA <- s_A * A * I
    
    return(list(c(dV , dD, dB, dE, dI, dA)))
    
  })
}

#parameter values
beta_V = 2
delta_B = 1
delta_V = 1 
delta_D = 3

k_IV = 1  
k_IB = 1
k_ID = 1
k_AV = 1
k_AB = 1
k_AD = 1
s_IV = 0.1
s_IB = 0.1
s_ID = 0.1
d_I = 0.5  
s_A = 5

#defining the parameters while beta_D loops through the specified values
parameter_grid <- expand.grid(beta_V = beta_V, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D,
                              k_IV = k_IV, k_IB = k_IB, k_ID = k_ID, s_z = s_z, k_AV = k_AV, k_AB = k_AB, k_AD = k_AD,
                              s_IV = s_IV, s_IB = s_IB, s_ID = s_ID, s_A = s_A, d_I = d_I,
                              beta_D = seq(from = 1, to = 5, by = step_size_grid))

#initial conditions
state <- c(V = 0.01, D = 0.1, B = 0.0, E=0.89, I = 0.02, A = 0.02)

#time to run the simulation along with the step size
times <- seq(0,20,by=0.1)
step_size_grid <- 0.05
step_size_times <- 0.1

#creating a function so the ode model runs for each parameter combination with beta_D
model_func <- function(i){
  results <- as.data.frame(cbind(ode(y = state, times = times, func = model, 
                                     parms = parameter_grid[i,]),
                                 beta_D = parameter_grid$beta_D[i]))
  
  return(results)
}

#feeding the defined parameters
resultz <- pbmclapply(1:nrow(parameter_grid), FUN = model_func, mc.cores = detectCores())

#combining the data into a data frame
resultz_new <- as.data.frame(do.call(rbind, resultz))

#converting the variables columns into rows
resultz_new_new <- pivot_longer(resultz_new, 2:7)

#print the head of the resultz_new variable
head(resultz_new)

#plot the data frame using ggplot

p1 <- ggplot(resultz_new, aes(x = time, y = beta_D, color = V))
p1 <- p1 + geom_line() + theme_minimal()
p1 <- p1 + geom_text(aes(label = V, colour = V, x = time, y = beta_D))
p1 <- p1 + labs(y = expression(beta[D]))
p1 <- p1 + theme(text = element_text(size = 15)) + theme(legend.position="none")
p1 <- p1 + scale_color_gradientn(colors = rev(topo.colors(12))) + ggtitle("DIPs (t = 0)",~paste(delta[D],"=3"))
plot(p1)

################ DIPs late ##################

#the ODE model
model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    dV <- beta_V * V * E - beta_D * B * V - delta_V * V - k_IV * I * V - k_AV * A * V
    dB <- beta_D * B * V + beta_V * V * D - delta_B * B - k_IB * I * B - k_AB * A * B
    dD <- beta_D * B * E - beta_V * V * D - delta_D * D - k_ID * I * D - k_AD * A * D
    dE <- (-dB -dV -dD)
    dI <- (1-I) * (s_IV * V + s_IB * B + s_ID * D) - d_I * I
    dA <- s_A * A * I
    
    return(list(c(dV , dD, dB, dE, dI, dA)))
    
  })
}

#parameter values
beta_V = 2
delta_B = 1
delta_V = 1 
delta_D = 3

k_IV = 1  
k_IB = 1
k_ID = 1
k_AV = 1
k_AB = 1
k_AD = 1
s_IV = 0.1
s_IB = 0.1
s_ID = 0.1
d_I = 0.5  
s_A = 5

#defining the parameters while beta_D loops through the specified values
parameter_grid <- expand.grid(beta_V = beta_V, delta_B = delta_B, delta_V = delta_V, delta_D = delta_D,
                              k_IV = k_IV, k_IB = k_IB, k_ID = k_ID, s_z = s_z, k_AV = k_AV, k_AB = k_AB, k_AD = k_AD,
                              s_IV = s_IV, s_IB = s_IB, s_ID = s_ID, s_A = s_A, d_I = d_I,
                              beta_D = seq(from = 1, to = 5, by = step_size_grid))

#initial conditions
state <- c(V = 0.01, D = 0.1,B = 0.0, E=0.99, I = 0.02, A = 0.02)

#time to run the simulation along with the step size
times <- seq(0,20,by=0.1)
step_size_grid <- 0.05
step_size_times <- 0.1

#creating a function so the ode model runs for each parameter combination with beta_D
model_func <- function(i){
  results <- as.data.frame(cbind(ode(y = state, times = times, func = model, 
                                     parms = parameter_grid[i,]),
                                 beta_D = parameter_grid$beta_D[i]))
  
  #check which rows we get V to be greater than 0.3
  x <- results$V > 0.3
 
    #find the row at which we first reach V greater than 0.3
    y <- min(which(x == TRUE))
    
    #save the data up until a row before we reach V greater than 0.3
    df1 <- results[1:(y-1),]
    
    #time to run the simulation along with the step size
    M <- 20
    
    #using the values of variables where DIP is introduced as initial condition
    state <- c(V = results[y,]$V, D = 0.1, B = 0, E = results[y,]$E-0.1, I = results[y,]$I, A = results[y,]$A)
    
    #using the time where DIP is introduced as starting time
    times <- seq(df1$time[y-1]+step_size_times,M,by=step_size_times) 
    
    #run the ode model with the parameter values and initial conditions specified
    df2 <- as.data.frame(cbind(ode(y = state, times = times, func = model, 
                                   parms = c(beta_D = parameter_grid$beta_D[i])),
                               beta_D = parameter_grid$beta_D[i]))
    
    #combining the dataframes before and after DIP introduction into one data frame
    df <- rbind(df1, df2)
    
    #combining the times before and after DIP introduction into one variable
    new_time <- c(df1$time,times)
    
    #calculating the Area Under the Curve of the entire dataset
    AUC <- trapz(new_time,df$V)
    
    #combine the AUC into the dataframe
    my_list <- as.data.frame(cbind(df,AUC))
    
    #return the variable my_list
    return(my_list)
}

#feeding the defined parameters
resultz <- pbmclapply(1:nrow(parameter_grid), FUN = model_func, mc.cores = detectCores())

#combining the data into a data frame
resultz_new <- as.data.frame(do.call(rbind, resultz))

#print the head of the resultz_new variable
head(resultz_new)

#converting the variables columns into rows
resultz_new_new <- pivot_longer(resultz_new, 2:7)

#plot the data frame using ggplot

p2 <- ggplot(resultz_new, aes(x = time, y = beta_D, color = V))
p2 < p2 + geom_line() + theme_minimal()
p2 <- p2 + geom_text(aes(label = V, colour = V, x = time, y = beta_D))
p2 <- p2 + labs(y = expression(beta[D]))
p2 <- p2 + theme(text = element_text(size = 15)) + theme(axis.title.y=element_blank(),
                                                       axis.text.y=element_blank(),
                                                       axis.ticks.y=element_blank())
p2 <- p2 + scale_color_gradientn(colors = rev(topo.colors(12))) + ggtitle("DIPs (t = 4.6)",~paste(delta[D],"=3"))
plot(p2)

# combine all the figures in a single page
grid.arrange(p1,p2,ncol=2)

